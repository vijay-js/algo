Notes To Revise

>> Iterative Insert versions -> Storing the node at which the insertion happens -> Very important technique

Traversals

>> The process of visiting all the nodes in the tree exactly once in some order

>> Breadth First Search
        - Visit all parents before visiting their children
        >> Time Complexity
                - Visit all nodes exactly once -> O(n) n being number of nodes
        >> Space Complexity
                - In a perfect binary tree - entire last level will be in queue. The number of nodes in the last level in a perfect binary tree is n/2. Hence O(n)

>> Depth First Search
        -- Visit all the child(left) and the whole subtree of the child before visiting the other child(right)

        3 types based on when root is visited
            root left right -> PreOrder
            left root right -> Inorder
            left right root -> PostOrder

     InOrder traversal of a Binary Search Tree would give a sorted list

     >> Time Complexity -> O(n) => Each node is visited once
     >>Space Complexity
            Max depth in implicit stack  of recursion is dependent on max depth of the tree O(h)

>> ZigZag Traversal
    - Same level order - can be done using 2 stacks or queue and a stack
    - Idea for a better solution using a single queue is to have deliemeters determining the levels while storing in array from queue and then use delimeters to reverse the segments between deliemeters




IMPORTANT  RECAP


>> Delete from a Binary Search Tree
    3 cases after finding the node to delete
        1. If no children for the node -> Just remove the node
        2. If the node has 1 child -> Replace the node with the data from the node below and delete the below node
        3. If the node has more than 2 children -> FindMin from the right subtree and replace that value in the node and delete the node as in case 1 or case 2. Since the min node wont have left child => it will fall in the case of 1 or 2


>> CHECK RIGHT VIEW OF A TREE WITH DFS ==> Key idea is to maintain depth while dfs and use this info